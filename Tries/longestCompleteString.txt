class Node {
private:
    Node* link[26];
    bool flag = false;

public:
    bool contains(char c) {
        return link[c - 'a'] != NULL;
    }

    void put(char c, Node* reference) {
        link[c-'a'] = reference;
    }

    Node* getNext(char c) {
        return link[c-'a'];
    }
   
    int getEnd() {
        return flag;
    }

    void setEnd() {
        flag = true;
    }
};


class Trie {
public:
    Node* root = new Node();

    void insert(string word) {
        Node* p = root;

        for(int i = 0; i < word.length(); i++) {
            if(!p->contains(word[i])){
                p->put(word[i], new Node());
            }
            p = p->getNext(word[i]);
        }
        p->setEnd();
    }

    bool longestCommonString(string word) {
        Node *p = root;

        for(int i = 0; i < word.length(); i++) {
            if(!p->contains(word[i])){
                return false;
            }
            else {
               p = p->getNext(word[i]);
               if(!p->getEnd())
               return false;
            }
            
        }
        return p->getEnd();
    }   
};


string completeString(int n, vector<string> &a){
    Trie t;
    
    for(int i = 0; i < n; i++)
        t.insert(a[i]);
    
    string res = "";
    
    for(int i = 0; i < n; i++) {

        if(t.longestCommonString(a[i])) {
            int s = a[i].length();
            if(res.length() < s)
                res = a[i];
            else if(res.length() == s) {
                res = (res < a[i]) ? res : a[i];
            }
            
            
        }
    }
    if(res.length() > 0)
    return res;
    else
    return "None";
}


int main() {
    vector<string> a = {"n" ,"ni" ,"nin" ,"ninj", "ninja", "ninga"};

    cout<<completeString(a.size(), a);
}