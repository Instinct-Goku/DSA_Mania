//tabular(bottom up)

int getMaxPathSum(vector<vector<int>> &matrix) {
	int n = matrix.size();
	int m = matrix[0].size();
	vector<vector<int>> dp(n, vector<int> (m,0));
	
	//base case
	for(int i = 0; i < m; i++) 
		dp[0][i] = matrix[0][i];
	
	for(int i = 1; i < n; i++) {
		for(int j = 0; j < m; j++) {
			
			int up = matrix[i][j] + dp[i-1][j];
			
			int ld = matrix[i][j];
			if(j-1 >= 0) ld += dp[i-1][j-1];
			else ld += -1e8;
			
			int rd = matrix[i][j];
			if(j+1 < m) rd += dp[i-1][j+1];
			else rd += -1e8;
			
			dp[i][j] = max(up,max(ld,rd));
			}
	}
	
	int ans = -1e9;
	for(int i = 0; i < m; i++){
		ans = max(ans,dp[n-1][i]);
	}
	
	return ans;
}


//DP (top down)
int solve(int i , int j, vector<vector<int>> &matrix, 
		  vector<vector<int>> &dp) {
	
	if(j < 0 || j >= matrix[0].size()) {
		return -1e8;
	}
	
	if(i == 0 ){
		return matrix[i][j];
	}
	
	if(dp[i][j] != -1)
		return dp[i][j];
	
	
	int up = matrix[i][j] + solve(i-1,j, matrix,dp);
	int ld = matrix[i][j] + solve(i-1,j-1,matrix,dp);
	int rd = matrix[i][j] + solve(i-1,j+1, matrix,dp);
	
	return dp[i][j] = max(up,max(ld,rd));
}

int getMaxPathSum(vector<vector<int>> &matrix) {
	int n = matrix.size();
	int m = matrix[0].size();
	vector<vector<int>> dp(n, vector<int> (m,-1));
	int ans = -1e9;
	for(int i = 0; i < m; i++){
		ans = max(ans,solve(n-1,i, matrix,dp));
	}
	
	return ans;
}

//bottom up + space optimized
int getMaxPathSum(vector<vector<int>> &matrix) {
	int n = matrix.size();
	int m = matrix[0].size();
	vector<int> prev(m,0);
	vector<int> cur(m,0);
	
	//base case
	for(int j = 0; j < m; j++) 
		prev[j] = matrix[0][j];
	
	for(int i = 1; i < n; i++) {
		for(int j = 0; j < m; j++) {
		
			int up = matrix[i][j] + prev[j];
			
			int ld = matrix[i][j];
			if(j-1 >= 0) ld += prev[j-1];
			else ld += -1e8;
			
			int rd = matrix[i][j];
			if(j+1 < m) rd += prev[j+1];
			else rd += -1e8;
			
			cur[j] = max(up,max(ld,rd));
			}
		prev = cur;
	}
	
	int ans = -1e8;
	for(int j = 0; j < m; j++){
		ans = max(ans,prev[j]);
		//cout<<prev[j]<<endl;
	}

	return ans;
}