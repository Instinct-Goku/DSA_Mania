#include<bits/stdc++.h>
using namespace std;

bool bfs(int s, vector<vector<int>> &graph, int t, int n, int *parent) {
    vector<bool> visited(n, false);

    queue<int> q;
    fill(parent.begin(), parent.end(), -1);

    q.push(s);
    visited[s] = true;
    parent[s] = -1;

    while(!q.empty()) {
        int i = q.front();
        q.pop();

        for(int j = 0; j < n; j++) {
            if(!visited[j] && graph[i][j] > 0) {
                if(j == t){
                    parent[j] = i;
                    return true;
                }

                q.push(j);
                visited[j] = true;
                parent[j] = i;
            }
        }
    }
    return false;
}

int ford(vector<vector<int>> &graph, int s, int t, int n) {
    int maxFlow = 0;

    int parent[n];

    while(bfs(s, graph, t, n, parent)) {
        int flow = INT_MAX;

        for(int i = t; i != s; i = parent[i]) {
            int j = parent[i];
            flow = min(flow, graph[i][j]);
        }

        for(int i = t; i != s; i = parent[i]) {
            int j = parent[i];
            graph[i][j] -= flow;
            graph[j][i] += flow;
        }
        maxFlow += flow;
    }

    return maxFlow;
}

int solve(int n, int m, vector<vector<int>> &edge) {

    vector<vector<int>> graph(n,vector<int> (n,0));

    for(int i = 0; i < edge.size(); i++) {
        int u = edge[i][0]-1;
        int v = edge[i][1]-1;
        int w = edge[i][2];

        graph[u][v] += w;
        graph[v][u] += w;
    }   

    return ford(graph, 0, n-1, n);   
}


int main() {
    int n = 5, m = 4;
    vector<vector<int>> edge = {{1, 2, 1} , {3, 2, 2}, {4, 2, 3}, {2, 5, 5} };

    cout<<solve(n,m,edge);
}

