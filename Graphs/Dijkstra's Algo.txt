#include<bits/stdc++.h>
using namespace std;


//returns shortest distance of all vertex from source
vector<int> solve(int V, vector<vector<int>> adj[], int S) {

    //pq of distance and vertex
    priority_queue<pair<int,int>> pq;
    vector<int> dist(V+1, INT_MAX);

    dist[S] = 0;

    pq.push({0, S});

    while(!pq.empty()) {
        int curNode = pq.top().second;
        int distUntil = (-1)*pq.top().first;
        pq.pop();

        for(auto x: adj[curNode]) {
            int child = x[0], w = x[1];
            if((distUntil + w )< dist[child]){
                dist[child] = (distUntil + w);
                pq.push({(-1)*(distUntil+w), child});
            }
        }
    }
    return dist; 
}



int main() {
    int vertex;
    int edges;
    cin>>vertex>>edges;

   vector<vector<int>> adj[vertex];
   int u ,v, w;
   for(int i = 0; i < edges; i++) {
        cin>>u>>v>>w;
        vector<int> t1, t2;
        t1.push_back(v);
        t1.push_back(w);
        adj[u].push_back(t1);
        t2.push_back(u);
        t2.push_back(w);
        adj[v].push_back(t2);
   }

   int source;
   cin>>source;

   vector<int> ans = solve(vertex, adj, source);
   for(int i = 0 ; i < ans.size()-1; i++)
        cout<<ans[i]<<" ";
}

