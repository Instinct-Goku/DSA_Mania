#include<bits/stdc++.h>
using namespace std;


bool dfs(int src, vector<int> adj[], bool *visited, bool *callStack) {
    visited[src] = true;
    callStack[src] = true;
    
    for(auto x : adj[src]) {
        if(!visited[x]){
            if(dfs(x, adj, visited, callStack))
                return true;
        }
        else if(callStack[x]){
            return true;
        }
    }
    callStack[src] = false;
    return false;
}

bool isCyclic(int V, vector<int> adj[]) {
    bool visited[V];
    bool callStack[V];
    memset(visited, 0, sizeof(visited));
    memset(callStack, 0, sizeof(callStack));
    
    for(int i = 0; i < V; i++) {
        if(!visited[i]) {
            if(dfs(i,adj,visited,callStack))
                return true;
        }
    }
    return false;
}

int main() {
    int V, E;
    cin>>V>>E;

    vector<int> adj[V];

    int u,v;

    for(int i = 0; i < E; i++) {
        cin>>u>>v;
        adj[u].push_back(v);
    }

    cout<<isCyclic(v, adj);
}

