#include<bits/stdc++.h>
using namespace std;


int *parent;
int *ranked;

struct Edge {
    int u,v,w;
    
    Edge(int u, int v, int w) {
        this->u = u;
        this->v = v;
        this->w = w;
    }
};

static bool compare(Edge a, Edge b) { 
    return (a.w < b.w); 
}

int find(int i) {
    if (parent[i] == -1)
        return i;

    return parent[i] = find(parent[i]);
}

void combine(int x, int y) {
    int s1 = find(x);
    int s2 = find(y);

    if (s1 != s2) {
        if (ranked[s1] < ranked[s2]) {
            parent[s1] = s2;
            ranked[s2] += ranked[s1];
        }
        else {
            parent[s2] = s1;
            ranked[s1] += ranked[s2];
        }
    }
}

int minSpan(vector<pair<int,int>> adj[], int v) {
    parent = new int[v+1];
    ranked = new int[v+1];
    vector<Edge> edges;

    for(int i = 0; i < v; i++) {
        parent[i] = -1;
        ranked[i] = 1;
    }

    for(int i = 0; i < v; i++) {
        for(auto x: adj[i]) {
            Edge *cur = new Edge(i, x.first, x.second);
            edges.push_back(*cur);
        }
    }

    sort(edges.begin(), edges.end(), compare);

    int ans = 0;
    int cnt = 0;
    
    for(Edge e : edges) {
        int p = find(e.u);
        int q = find(e.v);
        
        if(p != q) {
            combine(e.u,e.v);
            ans += e.w;
            cnt++;
        }
        
        if(cnt >= v-1) break;
    }
    
    return ans;
}


int main() {
    int V, E;
    cin>>V>>E;

    vector<pair<int,int>> adj[V];

    int u,v,w;

    for(int i = 0; i < E; i++) {
        cin>>u>>v>>w;
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }

    cout<<minSpan(adj, v);

}

