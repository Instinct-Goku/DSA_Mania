#include<bits/stdc++.h>
using namespace std;

class node{
    public:
    int data;
    node* next;
    node* random;
    
    node(int data){
        this->data = data;
        next = random = NULL;
    }
};


class LinkList {
    public:
    node *head;
    node *cur;
    
    LinkList() {
        head = NULL;
        cur = NULL;
    }
    
    void push(int val){
        node *n = new node(val);
        if(head == NULL){
            head = n;
            cur = head;
        }
        else{
            cur->next = n;
            cur = n;
        }
    }
    
    
    void display() {
        node* p = this->head;
        while(p != NULL){
        cout<<p->data<<" ";
        p = p->next;
        }
    }
    
    void displayRandom(){
        node *t = this->head;
        while(t != NULL){
            cout<<t->random->data<<" ";
            t = t->next;
        }
    }

    node* duplicate() {
        node* cur = head;
        
        //first loop to create duplicate node with next
        while(cur != NULL) {
            node* newnode = new node(cur->data);
            newnode->next = cur->next;
            cur->next = newnode;
            cur = newnode->next;
        }
        
        cur = head;
        
        //second loop to add random pointer
        while(cur != NULL) {
            if(cur->random) {
                cur->next->random = cur->random->next;
            }
            cur = cur->next->next;
        }
        
        cur = head;
        node* ans = cur->next;
        //third loop to separate LL
        while(cur != NULL) {
            node* temp = cur->next->next;
            if(cur->next->next)
                cur->next->next = cur->next->next->next;
            cur->next = temp;
            cur = temp;
        }
        
        node* temp = ans;
        
        return ans;
    }

};




int main() {
    LinkList ll;
    ll.push(1);
    ll.push(2);
    ll.push(3);
    ll.push(4);
    ll.head->random = ll.head->next->next;
    ll.head->next->random = ll.head;
    ll.head->next->next->random = ll.head->next->next;
    ll.head->next->next->next->random = ll.head->next;
    ll.display();
    cout<<endl;
    ll.displayRandom();

    node* dup = ll.duplicate();
}