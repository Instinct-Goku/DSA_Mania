#include<bits/stdc++.h>
using namespace std;


void prevSmall(int *a, int *prev, int n){
    stack<int> s;
    for(int i = 0; i < n; i++){
        while(!s.empty() && a[s.top()] >= a[i]){
            s.pop();
        }
        
        if(s.empty())
            prev[i] = -1;
        else
            prev[i] = s.top();
            
        s.push(i);
    }
    for(int i = 0; i < n; i++)
        cout<<prev[i]<<" ";

    cout<<endl;
}

void nextSmall(int *a, int *next, int n){
    stack<int> s;
    for(int i = n-1; i >= 0; i--){
        while(!s.empty() && a[s.top()] >= a[i]){
            s.pop();
        }
        if(s.empty())
            next[i] = n;
        else
            next[i] = s.top();
            
        s.push(i);
    }
      for(int i = 0; i < n; i++)
        cout<<next[i]<<" ";

    cout<<endl;
}
    
    
int largestArea(int *a, int n){
    int prevS[n];
    int nextS[n];
    prevSmall(a, prevS, n);
    nextSmall(a, nextS, n);
    int max = INT_MIN;
    int cur = 0;
    for(int i = 0; i < n; i++){
        cur = (nextS[i]-prevS[i]-1)*a[i];
        if(cur>max)
            max = cur;
    }
    return max;
}

int main() {    
    int a[] = {4,1,3,4,1};
    int n = sizeof(a)/sizeof(a[0]);
    cout<<largestArea(a,n);
}