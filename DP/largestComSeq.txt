#include <bits/stdc++.h>
using namespace std;

//TOP-DOWN APPROACH
int lcs(string a, string b, int i, int j, vector<vector<int>> &dp) {

    if(i == 0 || j == 0)
        return dp[i][j] = 0;

    if(dp[i][j] != -1)
        return dp[i][j];

    if(a[i-1] == b[j-1])
        return dp[i][j] = lcs(a,b,i-1,j-1,dp) + 1;
    else
        return dp[i][j] = max(lcs(a,b,i-1,j,dp),lcs(a,b,i,j-1,dp));
}

//BOTTOM-UP APPROACH
int lcs(string a, string b, int n, int m) {
    vector<vector<int>> dp(n+1, vector<int> (m+1,0));

    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= m; j++) {

            if(a[i-1] == b[j-1])
                dp[i][j] = dp[i-1][j-1]+1;
            else
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
        }
    }
    return dp[n][m];
}



int main() {
    string a = "AGGTAB";
    string b = "GXTXAYB";
    int n = a.length();
    int m = b.length();

    //vector<vector<int>> dp(n+1, vector<int> (m+1,-1));

    //cout<<lcs(a,b, a.length(), b.length(), dp);

    cout<<lcs(a,b,a.length(),b.length());
}