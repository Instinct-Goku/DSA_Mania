//bottom up approach
int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n+2, vector<int>(2,0));

        for(int i = n-1; i >= 0; i--) {
            for(int b = 0; b <= 1; b++) {
                if(b) {
                    dp[i][b] = max(-prices[i]+dp[i+1][0],dp[i+1][1]);
                }
                else{
                    dp[i][b] = max(prices[i]+dp[i+2][1], dp[i+1][0]);
                }
            }
        }
        return dp[0][1];
    }

//top down approach
//1 - buy , 0 - sell

int solve(int i, int oper, vector<int>& prices, vector<vector<int>> &dp) {
        if(i >= prices.size()) return 0;

        if(dp[i][oper] != -1) 
            return dp[i][oper];

        if(oper) {
            return dp[i][oper] = max(-prices[i]+solve(i+1,0,prices,dp),solve(i+1,1,prices,dp));
        }
        
        return dp[i][oper] = max(prices[i]+solve(i+2,1,prices,dp), solve(i+1,0,prices,dp));
    }